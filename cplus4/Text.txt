PROJECT NOTES


****************** OOP ******************************

&&&&&&&& EXAMPLE 3 &&&&&&&&&&&&&&&&


--------------- Main.cpp -------------------------
#include <iostream>
#include <string>
#include "Account.h"

using namespace std;


int main()
{
	Account frank_account;
	frank_account.set_name("Frank's account");
	frank_account.set_balance(1000);

	if (frank_account.deposit(200))
		cout << "Deposit OK" << endl;
	else
		cout << "Deposit Not Allowed" << endl;

	if (frank_account.withdraw(500))
		cout << "Withdrawal OK" << endl;
	else
		cout << "Not sufficient funds" << endl;

	if (frank_account.withdraw(1500))
		cout << "Withdrawal OK" << endl;
	else
		cout << "Not sufficient funds" << endl;
}



---------- Account.cpp -------------------
#include <iostream>
#include <string>
#include "Account.h"

using namespace std;

void Account::set_name(std::string n)
{
	name = n;
}

std::string Account::get_name()
{
	return name;
}

bool Account::deposit(double amount)
{
	balance += amount;
	return true;
}

bool Account::withdraw(double amount)
{
	if (balance - amount >= 0)
	{
		balance -= amount;
		return true;
	}
	else
		return false;

}



------------- Account.h -------------------------
#pragma once
#include <string>

class Account {
private:
	std::string name;
	double balance;
public:
	// Overloaded Constructors

	// methods declared inside the class
	void set_balance(double bal) { balance = bal; }
	double get_balance() { return balance; }

	// methods to be declared outside the class declaration
	void set_name(std::string n);
	std::string get_name();

	bool deposit(double amount);
	bool withdraw(double amount);
};









&&&&&&&& EXAMPLE 2 &&&&&&&&&&&&&&&&

#include <iostream>
#include <string>
#include "Account.h"

using namespace std;

class Account {
private:
	string name;
	double balance;

public:
	// inline methods
	void set_balance(double bal)
	{
		balance = bal;
	}

	double get_balance()
	{
		return balance;
	}

	// methods to be moved out of the class
	void set_name(string new_name);
	string get_name();

	bool deposit(double amount);
	bool withdraw(double amount);
};

void Account::set_name(string new_name)
{
	name = new_name;
}

string Account::get_name()
{
	return name;
}

bool Account::deposit(double amount)
{
	balance += amount;
	return true;
}

bool Account::withdraw(double amount)
{
	if (balance - amount >= 0)
	{
		balance -= amount;
		return true;
	}
	else
		return false;
}



int main()
{
	Account frank_account;
	frank_account.set_name("Frank's account.");
	frank_account.set_balance(1000);

	if (frank_account.deposit(200))
		cout << "Deposit OK" << endl;
	else
		cout << "Deposit not allowed" << endl;

	if (frank_account.withdraw(500))
		cout << "Withdraw OK" << endl;
	else
		cout << "Not sufficient funds" << endl;

	if (frank_account.withdraw(1500))
		cout << "Withdraw OK" << endl;
	else
		cout << "Not sufficient funds" << endl;
}











&&&&&&&& EXAMPLE 1 &&&&&&&&&&&&&&&&
 -------            main.cpp       ------------------
#include <iostream>
#include "Account.h"

int main()
{
	Account frank_account;
	frank_account.set_balance(1000);
	double balance = frank_account.get_balance();

	std::cout << balance << std::endl;
}


 -------            account.h       ------------------

 #pragma once

class Account
{
private:
	double balance;
public:
	void set_balance(double bal);
	double get_balance();
};


 -------            account.cpp       ------------------

#include <iostream>
#include "Account.h"

using namespace std;

// EXAMPLE 2
void Account::set_balance(double bal)
{
	balance = bal;
}

double Account::get_balance()
{
	return balance;
}

